---
import AuthProtected from "../features/auth/AuthProtected.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Dashboard">
  <AuthProtected>
    <main class="min-h-[calc(100vh-4rem)] flex flex-col md:flex-row gap-6 p-4 max-w-[90rem] mx-auto">
      <div class="w-full max-w-6xl mx-auto p-4 sm:p-6">
        <header class="flex flex-col sm:flex-row justify-between items-center mb-6 sm:mb-8 pb-4 border-b border-gray-200">
          <h1 class="text-3xl sm:text-4xl font-bold text-gray-700 mb-2 sm:mb-0">Dashboard</h1>
        </header>

        <!-- Sección de Gráfico y Tipo de Cambio -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6 sm:mb-8">
          <!-- Contenedor del Gráfico -->
          <div class="lg:col-span-2 bg-gray-50 border border-gray-200 p-4 sm:p-6 rounded-2xl shadow-inner flex items-center justify-center">
            <canvas id="myChart" class="w-full h-56 sm:h-72 md:h-80 lg:h-96"></canvas>
         </div>

          <!-- Recuadro del Valor del Dólar -->
          <div class="lg:col-span-1 bg-white border border-gray-200 p-4 sm:p-6 rounded-2xl shadow-xl flex flex-col justify-center items-center">
            <h3 class="text-xl sm:text-2xl font-bold text-gray-700 mb-2">Valor del Dólar</h3>
              <div class="text-gray-600 text-sm sm:text-base self-center text-center">
                <p class="text-sm sm:text-base">
                  <span id="update-date" class="font-medium"></span>
                </p>
              </div>
            <p class="text-4xl sm:text-5xl font-extrabold text-teal-600 leading-tight" id="usd-ves-rate">Cargando...</p>
            <p class="text-gray-500 mt-2 text-sm sm:text-base">1 USD = <span id="usd-ves-text"></span> VES</p>
          </div>
        </div>

        <!-- Sección de resumen financiero -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6 sm:mb-8">
          <!-- Tarjeta de Ingresos -->
          <div class="bg-indigo-50 border border-gray-200 p-4 sm:p-6 rounded-2xl shadow-xl flex flex-col justify-center">
            <div class="flex items-center mb-2">
              <div class="bg-indigo-200 text-indigo-800 p-3 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V2m0 6V2m0 16v-6m0 6c-1.11 0-2.08-.402-2.599-1M12 16c1.11 0 2.08-.402 2.599-1" />
                </svg>
              </div>
              <h2 class="text-lg sm:text-xl font-semibold text-gray-900">Ingresos</h2>
            </div>
            <!-- Contenedor para los valores de las monedas -->
            <p class="text-2xl sm:text-3xl font-bold text-gray-900" id="ingresos-usd">$0.00 USD</p>
            <p class="text-2xl sm:text-3xl font-bold text-gray-900" id="ingresos-ves">Bs.0.00 VES</p>
          </div>

          <!-- Tarjeta de Gastos -->
          <div class="bg-rose-50 border border-gray-200 p-4 sm:p-6 rounded-2xl shadow-xl flex flex-col justify-center">
            <div class="flex items-center mb-2">
              <div class="bg-rose-200 text-rose-800 p-3 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h2 class="text-lg sm:text-xl font-semibold text-gray-900">Gastos</h2>
            </div>
            <!-- Contenedor para los valores de las monedas -->
            <p class="text-2xl sm:text-3xl font-bold text-gray-900" id="gastos-usd">$0.00 USD</p>
            <p class="text-2xl sm:text-3xl font-bold text-gray-900" id="gastos-ves">Bs.0.00 VES</p>
          </div>

          <!-- Tarjeta de Ganancias -->
          <div class="bg-teal-50 border border-gray-200 p-4 sm:p-6 rounded-2xl shadow-xl flex flex-col justify-center">
            <div class="flex items-center mb-2">
              <div class="bg-teal-200 text-teal-800 p-3 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.409 9.172 5 7.5 5S4.168 5.409 3 6.253v13C4.168 18.409 5.828 18 7.5 18s3.332.409 4.5 1.253m0-13C13.168 5.409 14.828 5 16.5 5s3.332.409 4.5 1.253v13C19.832 18.409 18.172 18 16.5 18s-3.332-.409-4.5-1.253" />
                </svg>
              </div>
              <h2 class="text-lg sm:text-xl font-semibold text-gray-900">Ganancias</h2>
            </div>
            <!-- Contenedor para los valores de las monedas -->
            <p class="text-2xl sm:text-3xl font-bold text-gray-900" id="ganancias-usd">$0.00 USD</p>
            <p class="text-2xl sm:text-3xl font-bold text-gray-900" id="ganancias-ves">Bs.0.00 VES</p>
          </div>
        </div>
      </div>
    </main>

  </AuthProtected>
</Layout>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // @ts-nocheck
  import accountsModule, { accounts } from "../features/accounts/accounts.module";
  import transactionsModule, { transactions } from "../features/transactions/transactions.module";

    const ingresosUsdEl = document.getElementById('ingresos-usd');
    const ingresosVesEl = document.getElementById('ingresos-ves');
    const gastosUsdEl = document.getElementById('gastos-usd');
    const gastosVesEl = document.getElementById('gastos-ves');
    const gananciasUsdEl = document.getElementById('ganancias-usd');
    const gananciasVesEl = document.getElementById('ganancias-ves');
    const usdVesRateEl = document.getElementById('usd-ves-rate');
    const usdVesTextEl = document.getElementById('usd-ves-text');
    const updateDateEl = document.getElementById('update-date');
    const ctx = document.getElementById('myChart').getContext('2d');
    let myChart;

/**
 * Calculates total income, expenses, and profits in USD and VES.
 * @param {Array<Object>} transactions - The array of transactions.
 * @param {Array<Object>} accounts - The array of accounts.
 * @returns {Object} An object with the totals.
 */
const calculateTotals = (transactions, accounts) => {
    let totalIngresosUsd = 0;
    let totalGastosUsd = 0;
    let totalIngresosVes = 0;
    let totalGastosVes = 0;

    // Iterate over each transaction
    transactions.forEach(transaction => {
        const account = accounts.find(acc => acc.id === transaction.account_id);
        console.log(transaction, account); // Debugging line
                
        
        if (account) {
            const amount = Number(transaction.amount);

            if (account.currency === 'USD') {
              
                if (transaction.type === 'income') {
                    totalIngresosUsd += amount;
                } else if (transaction.type === 'expense') {
                    totalGastosUsd += amount;
                }
            } else if (account.currency === 'VES') {
                if (transaction.type === 'income') {
                    totalIngresosVes += amount;
                } else if (transaction.type === 'expense') {
                    totalGastosVes += amount;
                }
            }
        }
    });

    const totalGananciasUsd = totalIngresosUsd - totalGastosUsd;
    const totalGananciasVes = totalIngresosVes - totalGastosVes;

    return {
        ingresosUsd: totalIngresosUsd,
        gastosUsd: totalGastosUsd,
        gananciasUsd: totalGananciasUsd,
        ingresosVes: totalIngresosVes,
        gastosVes: totalGastosVes,
        gananciasVes: totalGananciasVes,
    };
};

    /**
     * Updates all dashboard elements with financial data.
     * @param {Object} totals - The object with total income, expenses, and profits.
     * @param {number} dolarToday - The current USD to VES exchange rate.
     */
    const updateDashboard = (totals, dolarToday) => {
        // Update HTML elements with calculated values
        ingresosUsdEl.textContent = `$${totals.ingresosUsd.toFixed(2)} USD`;
        ingresosVesEl.textContent = `Bs.${totals.ingresosVes.toFixed(2)} VES`;
        gastosUsdEl.textContent = `$${totals.gastosUsd.toFixed(2)} USD`;
        gastosVesEl.textContent = `Bs.${totals.gastosVes.toFixed(2)} VES`;
        gananciasUsdEl.textContent = `$${totals.gananciasUsd.toFixed(2)} USD`;
        gananciasVesEl.textContent = `Bs.${totals.gananciasVes.toFixed(2)} VES`;

        // Update the dollar rate
        usdVesRateEl.textContent = `Bs.${dolarToday.toFixed(2)}`;
        usdVesTextEl.textContent = `${dolarToday.toFixed(2)}`;

        // Update the date
        const today = new Date();
        updateDateEl.textContent = today.toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric' });

        // If the chart already exists, destroy it to avoid overlaps
        if (myChart) {
            myChart.destroy();
        }

        const data = {
            labels: ['Ingresos', 'Gastos', 'Ganancias'],
            datasets: [
                {
                    label: 'Resumen (USD)',
                    data: [totals.ingresosUsd, totals.gastosUsd, totals.gananciasUsd],
                    backgroundColor: ['#4f39f6', '#c70036', '#00bba7'],
                    borderColor: ['#4f39f6', '#c70036', '#00bba7'],
                    borderWidth: 1
                },
                {
                    label: 'Resumen (VES)',
                    data: [totals.ingresosVes, totals.gastosVes, totals.gananciasVes],
                    backgroundColor: ['#8e7bff', '#ff6384', '#66d9d0'],
                    borderColor: ['#8e7bff', '#ff6384', '#66d9d0'],
                    borderWidth: 1
                }
            ]
        };

        const config = {
            type: 'bar',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        stacked: true
                    },
                    y: {
                        stacked: true,
                        beginAtZero: true,
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Comparación de Ingresos, Gastos y Ganancias'
                    }
                }
            },
        };

        myChart = new Chart(ctx, config);
    };
    
  const initDashboard = async () => {
        try {
            // Get accounts and transactions first
            await accountsModule.getAccount();
            await transactionsModule.getTransaction();

            const apiUrl = 'https://ve.dolarapi.com/v1/dolares/oficial';
            const response = await fetch(apiUrl);
            
            if (!response.ok) {
                throw new Error(`Error de red: ${response.status}`);
            }
            
            const data = await response.json();
            const dolarToday = data.promedio; 
            
            // Now that data is available, you can call get()
            const transactionsData = transactions.get();
            const accountsData = accounts.get(); 
            const totals = calculateTotals(transactionsData, accountsData);

            // Call the update function with the new data
            updateDashboard(totals, dolarToday);

        } catch (error) {
            console.error("Could not get the dollar value:", error);
            usdVesRateEl.textContent = "Error";
            usdVesTextEl.textContent = "N/A";
        }
    };

    initDashboard();
</script>

