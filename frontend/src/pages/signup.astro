---
import AuthUnprotected from "../features/auth/AuthUnprotected.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Registrarse">
    <main class="min-h-screen flex items-center justify-center p-4 sm:p-8 bg-gray-50">
      <div class="w-full max-w-2xl p-8 md:p-10 space-y-8 bg-white rounded-2xl shadow-lg border border-gray-200">
        <!-- Encabezado mejorado -->
        <div class="text-center space-y-3">
          <h1 class="text-3xl md:text-4xl font-extrabold text-teal-600">Crea tu cuenta</h1>
        </div>

        <!-- Formulario con disposición de 2 columnas en PC -->
        <form id="signup-form" class="space-y-6 md:space-y-8">
          <div class="grid md:grid-cols-2 md:gap-6">
            <!-- Nombre (ocupará la primera columna en PC) -->
            <div class="space-y-3">
              <label for="nombre" class="block text-sm md:text-base font-medium text-gray-700">Nombre completo</label>
              <input
                type="text"
                id="nombre"
                name="nombre"
                placeholder="Ej: Carlos Rodríguez"
                class="w-full px-4 py-3 md:py-3.5 text-gray-900 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-200"
              />
            </div>

            <!-- Email (ocupará la segunda columna en PC) -->
            <div class="space-y-3 mt-4 md:mt-0">
              <label for="email" class="block text-sm md:text-base font-medium text-gray-700">Correo electrónico</label>
              <input
                type="email"
                id="email"
                name="email"
                placeholder="tu@email.com"
                class="w-full px-4 py-3 md:py-3.5 text-gray-900 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-200"
              />
            </div>
          </div>

          <!-- Contraseñas (se mantienen en columna completa) -->
          <div class="grid md:grid-cols-2 md:gap-6">
            <div class="space-y-3">
              <label for="password" class="block text-sm md:text-base font-medium text-gray-700">Contraseña</label>
              <input
                type="password"
                id="password"
                name="password"
                placeholder="••••••••"
                class="w-full px-4 py-3 md:py-3.5 text-gray-900 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-200"
              />
              <p id="password-helper" class="mt-1 text-xs md:text-sm text-gray-500">
                Mínimo 8 caracteres con números y símbolos.
              </p>
            </div>

            <div class="space-y-3 mt-4 md:mt-0">
              <label for="verify-password" class="block text-sm md:text-base font-medium text-gray-700">Confirmar contraseña</label>
              <input
                type="password"
                id="verify-password"
                name="verify-password"
                placeholder="••••••••"
                class="w-full px-4 py-3 md:py-3.5 text-gray-900 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition-all duration-200"
              />
              <p id="verify-password-helper" class="mt-1 text-xs md:text-sm text-gray-500">
                Debe coincidir con la contraseña.
              </p>
            </div>
          </div>

          <!-- Botón de registro mejorado -->
          <button
            type="submit"
            id="submit-button"
            class="w-full px-6 py-4 text-lg font-bold text-center text-white bg-gradient-to-r from-teal-600 to-teal-500 rounded-lg hover:from-teal-700 hover:to-teal-600 focus:ring-4 focus:ring-teal-300 transition-all duration-300 shadow-lg hover:shadow-xl"
          >
            Crear cuenta
          </button>
        </form>
      </div>
    </main>
</Layout>

<script>
  // @ts-nocheck
  import { BACK_ENDPOINT } from "../config/endpoints";
import { createNotification } from "../features/notifications/notificiation";
  import ky from 'ky';

  // DOM Element Selection
  const form = document.querySelector('#signup-form');
  const emailInput = document.querySelector('#email');
  const nameInput = document.querySelector('#nombre');
  const passwordInput = document.querySelector('#password');
  const verifyPasswordInput = document.querySelector('#verify-password');
  const submitButton = document.querySelector('#submit-button');

  // Validation Regular Expressions
  const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  const nameRegex = /^[A-Za-z0-9\s.,!?/-]{0,255}$/;
  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{6,}$/;


  // Validation State
  const validationState = {
    isEmailValid: false,
    isNameValid: false,
    isPasswordValid: false,
    doPasswordsMatch: false,
  };

  // Helper Function to Update Input Visuals
  function updateInputValidationUI(inputElement, isValid) {
    if (isValid) {
      // Use Tailwind classes for valid state: green border
      inputElement.classList.remove('border-red-500', 'dark:border-red-500');
      inputElement.classList.add('border-green-500', 'dark:border-green-500');
    } else {
      // Use Tailwind classes for invalid state: red border
      inputElement.classList.remove('border-green-500', 'dark:border-green-500');
      inputElement.classList.add('border-red-500', 'dark:border-red-500');
    }
    // Reset border color if the input is empty
    if (inputElement.value === '') {
      inputElement.classList.remove('border-red-500', 'dark:border-red-500', 'border-green-500', 'dark:border-green-500');
    }
  }

  // Master Validation Function
  function validateForm() {
    const { isEmailValid, isNameValid, isPasswordValid, doPasswordsMatch } = validationState;
    // Enable the button only if all validation checks pass
    submitButton.disabled = !isEmailValid || !isNameValid || !isPasswordValid || !doPasswordsMatch;
  }

  // Event Listeners for Real-time Validation

  // 1. Email Validation
  emailInput.addEventListener('input', () => {
    const isValid = emailRegex.test(emailInput.value);
    validationState.isEmailValid = isValid;
    updateInputValidationUI(emailInput, isValid);
    validateForm();
  });

  nameInput.addEventListener('input', () => {
    const isValid = nameRegex.test(nameInput.value);
    validationState.isNameValid = isValid;
    updateInputValidationUI(nameInput, isValid);
    validateForm();
  });

  // 2. Password Strength Validation
  passwordInput.addEventListener('input', () => {
    const isValid = passwordRegex.test(passwordInput.value);
    validationState.isPasswordValid = isValid;
    updateInputValidationUI(passwordInput, isValid);

    // Also, re-check the verify password field whenever the main password changes
    const passwordsMatch = passwordInput.value === verifyPasswordInput.value && verifyPasswordInput.value.length > 0;
    validationState.doPasswordsMatch = passwordsMatch;
    updateInputValidationUI(verifyPasswordInput, passwordsMatch);

    validateForm();
  });

  // 3. Verify Password Match Validation
  verifyPasswordInput.addEventListener('input', () => {
    const isValid = passwordInput.value === verifyPasswordInput.value && verifyPasswordInput.value.length > 0;
    validationState.doPasswordsMatch = isValid;
    updateInputValidationUI(verifyPasswordInput, isValid);
    validateForm();
  });

  // Form Submission
  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const { isEmailValid, isNameValid, isPasswordValid, doPasswordsMatch } = validationState;
    if (!isEmailValid || !isNameValid || !isPasswordValid || !doPasswordsMatch) return;


    try {
      await ky.post(`${BACK_ENDPOINT}/api/users`, {json: { email: emailInput.value, name:nameInput.value, password: passwordInput.value}});
      // Reinciar todos los estados del formulario
      for (const key in validationState) {
        validationState[key] = false;
      }
      form.reset();
      [emailInput, nameInput, passwordInput, verifyPasswordInput].forEach(input => {
        updateInputValidationUI(input);
      });
      validateForm();
      createNotification({ 
        title: 'Usuario creado!', 
        description: 'Se ha enviado un correo de verificacion a su bandeja de correo', 
        type: 'success'
      });
    } catch (error) {
      const errorData = await error?.response?.json();
      createNotification({ 
        title: 'Ups! Hubo un error', 
        description: errorData?.error ?? 'Sin mensaje', 
        type: 'error'
      });
    }  
  });
</script>
